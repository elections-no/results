{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ElectionTypes","state","election_types","res","message","console","log","status","_this2","this","fetch","then","response","ok","handleError","json","data","setState","getElectionTypes","react_default","a","createElement","map","item","key","id","name","React","Component","ElectionEvents","election_events","_this4","getElectionEvents","Elections","elections","_this6","getElections","election_event","election_type","App","className","App_ElectionTypes","App_ElectionEvents","App_Elections","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAGMA,oNACJC,MAAQ,CACNC,eAAgB,+EAGNC,EAAKC,GACfC,QAAQC,IAAI,UAAYH,EAAII,OAAS,MAAQH,8CAG5B,IAAAI,EAAAC,KACjBC,MAAM,iEACHC,KAAK,SAAAC,GAIJ,OAHKA,EAASC,IACZL,EAAKM,YAAYF,EAAU,gCAEtBA,EAASG,SAEjBJ,KAAK,SAAAK,GACJR,EAAKS,SAAS,CAACf,eAAgBc,EAAKd,+DAKxCO,KAAKS,oDAIL,OACEC,EAAAC,EAAAC,cAAA,UACIZ,KAAKR,MAAMC,eAAeoB,IAAI,SAASC,GACvC,OAAOJ,EAAAC,EAAAC,cAAA,MAAIG,IAAKD,EAAKE,IAAKF,EAAKG,gBA9BbC,IAAMC,YAqC5BC,6MACJ5B,MAAQ,CACN6B,gBAAiB,+EAGP3B,EAAKC,GACfC,QAAQC,IAAI,UAAYH,EAAII,OAAS,MAAQH,+CAG3B,IAAA2B,EAAAtB,KAClBC,MAAM,kEACHC,KAAK,SAAAC,GAIJ,OAHKA,EAASC,IACZkB,EAAKjB,YAAYF,EAAU,iCAEtBA,EAASG,SAEjBJ,KAAK,SAAAK,GACJe,EAAKd,SAAS,CAACa,gBAAiBd,EAAKc,gEAKzCrB,KAAKuB,qDAIL,OACEb,EAAAC,EAAAC,cAAA,UACGZ,KAAKR,MAAM6B,gBAAgBR,IAAI,SAASC,GACvC,OAAOJ,EAAAC,EAAAC,cAAA,MAAIG,IAAKD,EAAKE,IAAKF,EAAKG,gBA9BZC,IAAMC,WAqC7BK,6MACJhC,MAAQ,CACNiC,UAAW,+EAGD/B,EAAKC,GACfC,QAAQC,IAAI,UAAYH,EAAII,OAAS,MAAQH,0CAGhC,IAAA+B,EAAA1B,KACbC,MAAM,4DACHC,KAAK,SAAAC,GAIJ,OAHKA,EAASC,IACZsB,EAAKrB,YAAYF,EAAU,2BAEtBA,EAASG,SAEjBJ,KAAK,SAAAK,GACJmB,EAAKlB,SAAS,CAACiB,UAAWlB,EAAKkB,0DAKnCzB,KAAK2B,gDAIL,OACEjB,EAAAC,EAAAC,cAAA,UACGZ,KAAKR,MAAMiC,UAAUZ,IAAI,SAASC,GACjC,OAAOJ,EAAAC,EAAAC,cAAA,MAAIG,IAAKD,EAAKE,IAAKF,EAAKc,eAAxB,IAAyCd,EAAKe,yBA9BvCX,IAAMC,WAoDfW,MAff,WACE,OACEpB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,cAChBrB,EAAAC,EAAAC,cAAA,sCAGAF,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,SC/GYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.5a3d11dd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass ElectionTypes extends React.Component {\n  state = {\n    election_types: []\n  }\n\n  handleError(res, message) {\n    console.log(\"ERROR (\" + res.status + \"): \" + message);\n  }\n\n  getElectionTypes() {\n    fetch('https://sleepy-retreat-45150.herokuapp.com/api/election_types')\n      .then(response => {\n        if (!response.ok) {\n          this.handleError(response, \"Failed to get election types\");\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.setState({election_types: data.election_types});\n      });\n  }\n\n  componentDidMount() {\n    this.getElectionTypes();\n  }\n\n  render() {\n    return (\n      <ul>\n         {this.state.election_types.map(function(item) {\n          return <li key={item.id}>{item.name}</li>;\n        })}\n      </ul>\n    );\n  }\n}\n\nclass ElectionEvents extends React.Component {\n  state = {\n    election_events: []\n  }\n\n  handleError(res, message) {\n    console.log(\"ERROR (\" + res.status + \"): \" + message);\n  }\n\n  getElectionEvents() {\n    fetch('https://sleepy-retreat-45150.herokuapp.com/api/election_events')\n      .then(response => {\n        if (!response.ok) {\n          this.handleError(response, \"Failed to get election events\");\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.setState({election_events: data.election_events});\n      });\n  }\n\n  componentDidMount() {\n    this.getElectionEvents();\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.state.election_events.map(function(item) {\n          return <li key={item.id}>{item.name}</li>;\n        })}\n      </ul>\n    );\n  }\n}\n\nclass Elections extends React.Component {\n  state = {\n    elections: []\n  }\n\n  handleError(res, message) {\n    console.log(\"ERROR (\" + res.status + \"): \" + message);\n  }\n\n  getElections() {\n    fetch('https://sleepy-retreat-45150.herokuapp.com/api/elections')\n      .then(response => {\n        if (!response.ok) {\n          this.handleError(response, \"Failed to get elections\");\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.setState({elections: data.elections});\n      });\n  }\n\n  componentDidMount() {\n    this.getElections();\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.state.elections.map(function(item) {\n          return <li key={item.id}>{item.election_event} {item.election_type}</li>;\n        })}\n      </ul>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Election Results for 2019\n        </p>\n        <ElectionTypes/>\n        <ElectionEvents/>\n        <Elections/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}