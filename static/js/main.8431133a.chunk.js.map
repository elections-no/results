{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ElectionTypes","state","election_types","res","message","console","log","status","_this2","this","fetch","then","response","ok","handleError","json","data","setState","getElectionTypes","react_default","a","createElement","map","item","key","id","name","React","Component","ElectionEvents","election_events","_this4","getElectionEvents","Elections","elections","_this6","getElections","election_event","election_type","BarChart","svg","ReactDOM","findDOMNode","drawChart","_this$props","props","width","height","_this$props2","innerHTML","d3","selectAll","enter","append","attr","d","i","_this$props3","Norway","_this7","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","countiesCollection","municipalitiesCollection","counties","municipalities","hovered","handleCountyClick","bind","assertThisInitialized","handleMunicipalityClick","countyHoverEnter","countyHoverLeave","_this$props4","geoMercator","fitSize","countyIndex","properties","NAME_1","municipalityIndex","feature","objects","NOR_adm1","NOR_adm2","features","_this8","_this$props5","viewBox","className","concat","geoPath","projection","onClick","App","map_data","map_width","map_height","App_Norway","App_BarChart","App_ElectionTypes","App_ElectionEvents","App_Elections","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8431133a.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport * as d3 from \"d3\";\nimport { geoMercator, geoPath } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nimport counties from \"./json/norway-counties.json\";\nimport municipalities from \"./json/norway-municipalities.json\";\n\nclass ElectionTypes extends React.Component {\n  state = {\n    election_types: []\n  };\n\n  handleError(res, message) {\n    console.log(\"ERROR (\" + res.status + \"): \" + message);\n  }\n\n  getElectionTypes() {\n    fetch(\"https://sleepy-retreat-45150.herokuapp.com/api/election_types\")\n      .then(response => {\n        if (!response.ok) {\n          this.handleError(response, \"Failed to get election types\");\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.setState({ election_types: data.election_types });\n      });\n  }\n\n  componentDidMount() {\n    this.getElectionTypes();\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.state.election_types.map(function(item) {\n          return <li key={item.id}>{item.name}</li>;\n        })}\n      </ul>\n    );\n  }\n}\n\nclass ElectionEvents extends React.Component {\n  state = {\n    election_events: []\n  };\n\n  handleError(res, message) {\n    console.log(\"ERROR (\" + res.status + \"): \" + message);\n  }\n\n  getElectionEvents() {\n    fetch(\"https://sleepy-retreat-45150.herokuapp.com/api/election_events\")\n      .then(response => {\n        if (!response.ok) {\n          this.handleError(response, \"Failed to get election events\");\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.setState({ election_events: data.election_events });\n      });\n  }\n\n  componentDidMount() {\n    this.getElectionEvents();\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.state.election_events.map(function(item) {\n          return <li key={item.id}>{item.name}</li>;\n        })}\n      </ul>\n    );\n  }\n}\n\nclass Elections extends React.Component {\n  state = {\n    elections: []\n  };\n\n  handleError(res, message) {\n    console.log(\"ERROR (\" + res.status + \"): \" + message);\n  }\n\n  getElections() {\n    fetch(\"https://sleepy-retreat-45150.herokuapp.com/api/elections\")\n      .then(response => {\n        if (!response.ok) {\n          this.handleError(response, \"Failed to get elections\");\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.setState({ elections: data.elections });\n      });\n  }\n\n  componentDidMount() {\n    this.getElections();\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.state.elections.map(function(item) {\n          return (\n            <li key={item.id}>\n              {item.election_event} {item.election_type}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nclass BarChart extends React.Component {\n  componentDidMount() {\n    this.svg = ReactDOM.findDOMNode(this);\n    this.drawChart();\n  }\n\n  componentDidUpdate() {\n    const { width, height } = this.props;\n    if (width !== 0 && height !== 0) {\n      this.drawChart();\n    }\n  }\n\n  drawChart() {\n    const { data, height } = this.props;\n\n    this.svg.innerHTML = \"\";\n\n    const svg = d3.select(this.svg);\n\n    svg\n      .selectAll(\"rect\")\n      .data(data)\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", (d, i) => i * 90) // space between columns\n      .attr(\"y\", (d, i) => height - 10 * d)\n      .attr(\"width\", 65)\n      .attr(\"height\", (d, i) => d * 10)\n      .attr(\"fill\", \"gray\");\n  }\n\n  render() {\n    const { width, height } = this.props;\n    return <svg width={width} height={height} />;\n  }\n}\n\nclass Norway extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      countiesCollection: [],\n      municipalitiesCollection: [],\n      counties: [],\n      municipalities: [],\n      hovered: -1\n    };\n\n    this.handleCountyClick = this.handleCountyClick.bind(this);\n    this.handleMunicipalityClick = this.handleMunicipalityClick.bind(this);\n    this.countyHoverEnter = this.countyHoverEnter.bind(this);\n    this.countyHoverLeave = this.countyHoverLeave.bind(this);\n  }\n  projection() {\n    const { width, height } = this.props;\n    return geoMercator().fitSize(\n      [width, height],\n      this.state.countiesCollection\n    );\n  }\n\n  countyHoverEnter(countyIndex) {\n    console.log(\n      \"Hover enter on county: \",\n      this.state.counties[countyIndex].properties.NAME_1\n    );\n    this.setState({\n      hovered: countyIndex\n    });\n  }\n\n  countyHoverLeave(countyIndex) {\n    console.log(\n      \"Hover leave on county: \",\n      this.state.counties[countyIndex].properties.NAME_1\n    );\n    this.setState({\n      hovered: -1\n    });\n  }\n\n  handleCountyClick(countyIndex) {\n    console.log(\n      \"Clicked on county: \",\n      this.state.counties[countyIndex].properties.NAME_1\n    );\n  }\n\n  handleMunicipalityClick(municipalityIndex) {\n    console.log(\n      \"Clicked on municipality: \",\n      this.state.municipalities[municipalityIndex].properties.NAME_1\n    );\n  }\n\n  componentDidMount() {\n    this.setState({\n      countiesCollection: feature(counties, counties.objects.NOR_adm1),\n      municipalitiesCollection: feature(\n        municipalities,\n        municipalities.objects.NOR_adm2\n      ),\n      counties: feature(counties, counties.objects.NOR_adm1).features,\n      municipalities: feature(municipalities, municipalities.objects.NOR_adm2)\n        .features\n    });\n  }\n\n  render() {\n    const { width, height } = this.props;\n    return (\n      <svg\n        width={width}\n        height={height}\n        viewBox={\"0 0 \" + width + \" \" + height}\n      >\n        <g className=\"counties\">\n          {this.state.counties.map((d, i) => (\n            <path\n              key={`path-${i}`}\n              d={geoPath().projection(this.projection())(d)}\n              className=\"county\"\n              onClick={() => this.handleCountyClick(i)}\n            />\n          ))}\n        </g>\n        <g className=\"municipalities\">\n          {this.state.municipalities.map((d, i) => (\n            <path\n              key={`path-${i}`}\n              d={geoPath().projection(this.projection())(d)}\n              className=\"municipality\"\n              onClick={() => this.handleMunicipalityClick(i)}\n            />\n          ))}\n        </g>\n      </svg>\n    );\n  }\n}\n\nclass App extends React.Component {\n  state = {\n    data: [12, 5, 6, 6, 9, 10],\n    map_data: [12, 5, 6, 6, 9, 10],\n    width: 700,\n    height: 200,\n    map_width: 800,\n    map_height: 450\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Election Results for 2019</p>\n          <Norway\n            width={2 * this.state.map_width}\n            height={2 * this.state.map_height}\n          />\n          <BarChart\n            data={this.state.data}\n            width={this.state.width}\n            height={this.state.height}\n          />\n          <ElectionTypes />\n          <ElectionEvents />\n          <Elections />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}