{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ElectionTypes","state","election_types","res","message","console","log","status","_this2","this","fetch","then","response","ok","handleError","json","data","setState","getElectionTypes","react_default","a","createElement","map","item","key","id","name","React","Component","ElectionEvents","election_events","_this4","getElectionEvents","Elections","elections","_this6","getElections","election_event","election_type","BarChart","svg","ReactDOM","findDOMNode","drawChart","_this$props","props","width","height","_this$props2","innerHTML","d3","selectAll","enter","append","attr","d","i","_this$props3","Norway","_this7","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","countiesCollection","municipalitiesCollection","counties","municipalities","handleCountyClick","bind","assertThisInitialized","handleClick","_this$props4","geoMercator","fitSize","bbox","x","y","selection","node","getBBox","countyIndex","makeId","classed","setClickHandled","was_selected","isCountySelected","deselectAllCounties","zoomOut","getCounty","selectCounty","_this$getBoundingBox","getBoundingBox","zoomIn","makeViewBoxString","getCountyName","getCountyNumber","view","_this$props5","properties","ID_1","NAME_1","nodes","isClickHandled","resetClickHandled","feature","objects","NOR_adm1","NOR_adm2","features","kind","enumerator","_this8","_this$props6","viewBox","onClick","className","concat","geoPath","projection","App","map_data","map_width","map_height","App_Norway","App_BarChart","App_ElectionTypes","App_ElectionEvents","App_Elections","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.867d377a.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport * as d3 from \"d3\";\nimport { geoMercator, geoPath } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nimport counties from \"./json/norway-counties.json\";\nimport municipalities from \"./json/norway-municipalities.json\";\n\nclass ElectionTypes extends React.Component {\n  state = {\n    election_types: []\n  };\n\n  handleError(res, message) {\n    console.log(\"ERROR (\" + res.status + \"): \" + message);\n  }\n\n  getElectionTypes() {\n    fetch(\"https://sleepy-retreat-45150.herokuapp.com/api/election_types\")\n      .then(response => {\n        if (!response.ok) {\n          this.handleError(response, \"Failed to get election types\");\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.setState({ election_types: data.election_types });\n      });\n  }\n\n  componentDidMount() {\n    this.getElectionTypes();\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.state.election_types.map(function(item) {\n          return <li key={item.id}>{item.name}</li>;\n        })}\n      </ul>\n    );\n  }\n}\n\nclass ElectionEvents extends React.Component {\n  state = {\n    election_events: []\n  };\n\n  handleError(res, message) {\n    console.log(\"ERROR (\" + res.status + \"): \" + message);\n  }\n\n  getElectionEvents() {\n    fetch(\"https://sleepy-retreat-45150.herokuapp.com/api/election_events\")\n      .then(response => {\n        if (!response.ok) {\n          this.handleError(response, \"Failed to get election events\");\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.setState({ election_events: data.election_events });\n      });\n  }\n\n  componentDidMount() {\n    this.getElectionEvents();\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.state.election_events.map(function(item) {\n          return <li key={item.id}>{item.name}</li>;\n        })}\n      </ul>\n    );\n  }\n}\n\nclass Elections extends React.Component {\n  state = {\n    elections: []\n  };\n\n  handleError(res, message) {\n    console.log(\"ERROR (\" + res.status + \"): \" + message);\n  }\n\n  getElections() {\n    fetch(\"https://sleepy-retreat-45150.herokuapp.com/api/elections\")\n      .then(response => {\n        if (!response.ok) {\n          this.handleError(response, \"Failed to get elections\");\n        }\n        return response.json();\n      })\n      .then(data => {\n        this.setState({ elections: data.elections });\n      });\n  }\n\n  componentDidMount() {\n    this.getElections();\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.state.elections.map(function(item) {\n          return (\n            <li key={item.id}>\n              {item.election_event} {item.election_type}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nclass BarChart extends React.Component {\n  componentDidMount() {\n    this.svg = ReactDOM.findDOMNode(this);\n    this.drawChart();\n  }\n\n  componentDidUpdate() {\n    const { width, height } = this.props;\n    if (width !== 0 && height !== 0) {\n      this.drawChart();\n    }\n  }\n\n  drawChart() {\n    const { data, height } = this.props;\n\n    this.svg.innerHTML = \"\";\n\n    const svg = d3.select(this.svg);\n\n    svg\n      .selectAll(\"rect\")\n      .data(data)\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", (d, i) => i * 90) // space between columns\n      .attr(\"y\", (d, i) => height - 10 * d)\n      .attr(\"width\", 65)\n      .attr(\"height\", (d, i) => d * 10)\n      .attr(\"fill\", \"gray\");\n  }\n\n  render() {\n    const { width, height } = this.props;\n    return <svg width={width} height={height} />;\n  }\n}\n\nclass Norway extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      countiesCollection: [],\n      municipalitiesCollection: [],\n      counties: [],\n      municipalities: []\n    };\n\n    this.handleCountyClick = this.handleCountyClick.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  projection() {\n    const { width, height } = this.props;\n    return geoMercator().fitSize([width, height], this.state.countiesCollection);\n  }\n\n  getBoundingBoxCenter(bbox) {\n    return [bbox.x + bbox.width / 2, bbox.y + bbox.height / 2];\n  }\n\n  getBoundingBox(selection) {\n    const element = selection.node();\n    return element.getBBox();\n  }\n\n  makeViewBoxString(x, y, width, height) {\n    return \"\" + x + \" \" + y + \" \" + width + \" \" + height;\n  }\n\n  isCountySelected(countyIndex) {\n    const key = \"#\" + this.makeId(\"county\", countyIndex);\n    const selection = d3.select(key);\n    return selection.classed(\"active\");\n  }\n\n  getCounty(countyIndex) {\n    const key = \"#\" + this.makeId(\"county\", countyIndex);\n    return d3.select(key);\n  }\n\n  selectCounty(selection) {\n    selection.classed(\"active\", true);\n  }\n\n  handleCountyClick(countyIndex) {\n    this.setClickHandled();\n\n    const was_selected = this.isCountySelected(countyIndex);\n    this.deselectAllCounties();\n\n    if (!was_selected) {\n      const selection = this.getCounty(countyIndex);\n      this.selectCounty(selection);\n      const { x, y, width, height } = this.getBoundingBox(selection);\n      this.zoomIn(this.makeViewBoxString(x, y, width, height));\n    } else {\n      this.zoomOut();\n    }\n\n    console.log(\"Clicked on county: \", this.getCountyName(countyIndex));\n    console.log(\"Clicked on county number: \", this.getCountyNumber(countyIndex));\n  }\n\n  zoomIn(view) {\n    d3.select(\"svg\").attr(\"viewBox\", view);\n  }\n\n  zoomOut() {\n    const { width, height } = this.props;\n    let view = this.makeViewBoxString(0, 0, width, height);\n    d3.select(\"svg\").attr(\"viewBox\", view);\n  }\n\n  getCountyNumber(countyIndex) {\n    return this.state.counties[countyIndex].properties.ID_1;\n  }\n\n  getCountyName(countyIndex) {\n    return this.state.counties[countyIndex].properties.NAME_1;\n  }\n\n  setClickHandled() {\n    d3.select(\"#\" + this.props.id).classed(\"clicked\", true);\n  }\n\n  resetClickHandled() {\n    d3.select(\"#\" + this.props.id).classed(\"clicked\", false);\n  }\n\n  isClickHandled() {\n    return d3.select(\"#\" + this.props.id).classed(\"clicked\");\n  }\n\n  deselectAllCounties() {\n    d3.selectAll(\"path\").classed(\"active\", (d, i, nodes) => {\n      const node = d3.select(nodes[i]);\n      node.classed(\"active\", false);\n    });\n  }\n\n  handleClick() {\n    if (this.isClickHandled()) {\n      this.resetClickHandled();\n    } else {\n      console.log(\"Clicked!\");\n      this.deselectAllCounties();\n      this.zoomOut();\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      countiesCollection: feature(counties, counties.objects.NOR_adm1),\n      municipalitiesCollection: feature(municipalities, municipalities.objects.NOR_adm2),\n      counties: feature(counties, counties.objects.NOR_adm1).features,\n      municipalities: feature(municipalities, municipalities.objects.NOR_adm2).features\n    });\n  }\n\n  makeId(kind, enumerator) {\n    const { id } = this.props;\n    return \"\" + id + \"-\" + kind + \"-\" + enumerator;\n  }\n\n  render() {\n    const { id, width, height } = this.props;\n    return (\n      <svg id={id} width={width} height={height} viewBox={\"0 0 \" + width + \" \" + height} onClick={() => this.handleClick()}>\n        <g className=\"counties\">\n          {this.state.counties.map((d, i) => (\n            <path\n              id={this.makeId(\"county\", i)}\n              key={`county-${i}`}\n              d={geoPath().projection(this.projection())(d)}\n              className=\"county\"\n              onClick={() => this.handleCountyClick(i)}\n            />\n          ))}\n        </g>\n        <g className=\"municipalities\">\n          {this.state.municipalities.map((d, i) => (\n            <path key={`municipality-${i}`} d={geoPath().projection(this.projection())(d)} className=\"municipality\" />\n          ))}\n        </g>\n      </svg>\n    );\n  }\n}\n\nclass App extends React.Component {\n  state = {\n    data: [12, 5, 6, 6, 9, 10],\n    map_data: [12, 5, 6, 6, 9, 10],\n    width: 700,\n    height: 200,\n    map_width: 800,\n    map_height: 450\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Election Results for 2019</p>\n          <Norway id=\"simple\" width={2 * this.state.map_width} height={2 * this.state.map_height} />\n          <BarChart data={this.state.data} width={this.state.width} height={this.state.height} />\n          <ElectionTypes />\n          <ElectionEvents />\n          <Elections />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}